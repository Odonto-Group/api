name: Node.js CI

on:
  push:
    branches: [ develop ]

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Cache node modules
        id: cache-npm
        uses: actions/cache@v3
        env:
          cache-name: cache-node-modules
        with:
          path: ~/.npm
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
        name: List the state of node modules
        continue-on-error: true
        run: yarn list

      - name: Build artifacts
        uses: actions/setup-node@v3
        with:
          node-version: '16.x'
      - run: yarn install --non-interactive
      - run: node ace build --production --ignore-ts-errors
      - run: |
          cd build
          yarn install --production --non-interactive
          echo "GIT_BRANCH=${GITHUB_REF##*/}" >> $GITHUB_ENV
          tar cf ../${{ env.GIT_BRANCH }}.tar .

      - name: Archive artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-folder
          path: |
            ${{ env.GIT_BRANCH }}.tar
            .env*
          retention-days: 5

  deploy:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/download-artifact@v3
        with:
          name: build-folder

      - name: Display structure of downloaded files
        run: ls -lhart
        working-directory: ./

      # - name: Deploy to Staging server
      #   uses: easingthemes/ssh-deploy@main
      #   env:
      #     SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
      #     ARGS: "-rlgoDzvc -i"
      #     SOURCE: "dist/"
      #     REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
      #     REMOTE_USER: ${{ secrets.REMOTE_USER }}
      #     TARGET: ${{ secrets.REMOTE_TARGET }}
      #     EXCLUDE: "/dist/, /node_modules/"
      #     SCRIPT_BEFORE: |
      #       whoami
      #       ls -al
      #     SCRIPT_AFTER: |
      #       whoami
      #       ls -al
      #       echo $RSYNC_STDOUT